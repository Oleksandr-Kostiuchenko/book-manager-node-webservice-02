tags:
  - Books
summary: Get list of Books
operationId: getBooks
description: 'Get list of books with this endpoint'
security:
  - bearerAuth: []
parameters:
  - in: query
    name: page
    schema:
      type: integer
      example: 1
  - in: query
    name: perPage
    schema:
      type: integer
      example: 10
  - in: query
    name: sortBy
    schema:
      type: string
      example: 'name'
      description: "All books's fields can be mentioned. Default value - _id"
  - in: query
    name: sortOrder
    schema:
      type: string
      enum: ['asc', desc]
      example: 'asc'
  - in: query
    name: author
    schema:
      type: string
  - in: query
    name: minYear
    schema:
      type: number
      example: 2000
  - in: query
    name: maxYear
    schema:
      type: number
      example: 2010
  - in: query
    name: genre
    schema:
      type: string
      enum:
        [
          'Fiction',
          'Non-fiction',
          'Mystery',
          'Fantasy',
          'Science Fiction',
          'Biography',
          'Romance',
          'Historical',
          'Thriller',
          'Horror',
          'Self-help',
          'Philosophy',
          'Poetry',
          'Young Adult',
          'Children',
          'Graphic Novel',
          'Classic',
          'Motivation',
        ]
  - in: query
    name: isRead
    schema:
      type: boolean
  - in: query
    name: myBooks
    schema:
      type: boolean
      description: 'Books created by you'
responses:
  '200':
    description: 'Successfully found books!'
    content:
      application/json:
        schema:
          type: object
          required:
            - status
            - message
            - data
          properties:
            status:
              type: integer
              example: 200
            message:
              type: string
              example: Successfully found books!
            data:
              type: object
              required:
                - data
                - page
                - perPage
                - totalItems
                - totalPages
                - hasNextPage
                - hasPreviousPage
              properties:
                data:
                  type: array
                  items:
                    $ref: ../../components/schemas/book.yaml
                page:
                  type: number
                  example: 2
                perPage:
                  type: number
                  example: 10
                totalItems:
                  type: number
                  example: 100
                totalPages:
                  type: number
                  example: 10
                hasNextPage:
                  type: boolean
                  example: true
                hasPreviousPage:
                  type: boolean
                  example: false
  '401':
    $ref: ../../components/responses/401.yaml
